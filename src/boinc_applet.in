#!/usr/bin/env python
# -*- coding: utf-8 -*-

"""
Provide an applet for the MATE panel to monitor the progress of BOINC tasks

Provide a configuration dialog so that the user can specify how many tasks
have their status displayed in the panel, also whether or not the
user's BOINC credits are shown, and how often the information is updated

Provide a status dialog to show the status of all current and pending BOINC
tasks, the user's credits earned and any project notices recieved

Provide an about dialog
"""

import gettext
gettext.bindtextdomain("boinc_monitor")
gettext.textdomain("boinc_monitor")
_ = gettext.gettext

import sys
sys.path.insert(1, '@pythondir@')

import gi
gi.require_version("Gtk", "2.0")
from gi.repository import Gtk, MatePanelApplet, GObject, Pango, Gio
import time
import boinc_client

def write_to_log_file(thing, newfile):

    """
    Provide a quick and dirty logging facility

    thing = the string to be wrriten to the log file
    newfile = boolean - if True the log file is created,
                        if False it is appended to
    """

    filename = "/home/robin/devel/boinc-applet/src/log"
    if newfile:
        thefile = open(filename, 'w')
    else:
        thefile = open(filename, 'a')

    thefile.write(time.strftime("%d %b %X: "+ thing + "\n"))
    thefile.close()


class BoincApplet:
    """
    Class to encapsulate all of the applet's functionality

    Setup the panel applet and display the information specified by
    the user
    Communicate with the boinc client to retrieve task statuses etc
    Cope gracefully when the cient is not running
    Regularly update the panel
    Provide detailed information in a status dialog
    Provide a configuration dialog
    Provide an about dialog
    """

    def __init__(self, applet):
        """
        specify all instance attributes
        """

        """
        specify the attributes related to communicating with the BOINC client
        and displaying info on the panel
        """
        self.boinc = boinc_client.BoincClient()
        self.panel_applet = applet
        self.task_images = []
        self.task_labels = []
        self.spacer_labels = []
        self.credit_labels = []
        self.lbl_total_uc = None
        self.lbl_today_uc = None
        self.screen = None
        self.settings_path = self.panel_applet.get_preferences_path()
        self.settings = Gio.Settings.new_with_path("org.mate.panel.applet.BoincMonitor", self.settings_path)
        self.panel_box = None
        self.event_box = None
        self.num_notices = 0
        self.update_results_timer = None
        self.update_results_interval = 0
        self.update_sundries_timer = None
        self.update_sundries_interval = 0
        self.offline_timer_obj = None

        """
        specify instance attributes relating to the status window
        """
        self.status_win = None
        self.status_win_button = None
        self.status_win_vbox = None
        self.status_win_hbx = None
        self.status_win_tree_view = None
        self.status_win_notebook = None
        self.status_win_list_store = None
        self.status_win_slot_renderer = None
        self.status_win_state_renderer = None
        self.status_win_fd_renderer = None
        self.status_win_project_renderer = None
        self.status_win_name_renderer = None
        self.status_win_col_slot = None
        self.status_win_col_state = None
        self.status_win_col_fraction_done = None
        self.status_win_col_project = None
        self.status_win_col_task_name = None
        self.status_win_table_stats = None
        self.status_win_lbl_data_col = None
        self.status_win_lbl_stat_date = None
        self.status_win_lbl_uct_col = None
        self.status_win_lbl_stat_today_uc = None
        self.status_win_lbl_hct_col = None
        self.status_win_lbl_stat_today_hc = None
        self.status_win_lbl_title_avg_uc_col = None
        self.status_win_lbl_stat_avg_uc = None
        self.status_win_lbl_title_avg_hc_col = None
        self.status_win_lbl_stat_avg_hc = None
        self.status_win_lbl_total_uc_col = None
        self.status_win_lbl_stat_total_uc = None
        self.status_win_lbl_total_hc_col = None
        self.status_win_lbl_stat_total_hc = None
        self.status_win_scrolled_win = None
        self.status_win_tv_notices = None

        """
        specify instance attributes relating to the preferences window
        """
        self.prefs_win = None
        self.prefs_win_vbox = None
        self.prefs_win_cancel_btn = None
        self.prefs_win_ok_btn = None
        self.prefs_win_hbbx = None
        self.prefs_win_frame_display = None
        self.prefs_win_table_display = None
        self.prefs_win_lbl_numtasks = None
        self.prefs_win_spinbtn_tasks = None
        self.prefs_win_spinbtn_adj = None
        self.prefs_win_cbc_today_uc = None
        self.prefs_win_cbc_total_uc = None
        self.prefs_win_frame_display_align = None
        self.prefs_win_frame_updates = None
        self.prefs_win_frame_updates_align = None
        self.prefs_win_table_updates = None
        self.prefs_win_lbl_task_interval = None
        self.prefs_win_spinbtn_task_interval = None
        self.prefs_win_spinbtn_task_adj = None
        self.prefs_win_lbl_sundries_interval = None
        self.prefs_win_spinbtn_lp_interval = None
        self.prefs_win_spinbtn_si_adj = None

        """
        specify instance attributes relating to the about window
        """
        self.about_win = None
        self.about_win_button = None
        self.about_win_vbox = None
        self.about_win_hbx = None
        self.about_win_image = None
        self.about_win_lbl_title = None
        self.about_win_lbl_blurb1 = None
        self.about_win_lbl_blurb2 = None
        self.about_win_hbx_gpl = None
        self.about_win_lbl_gpl1 = None
        self.about_win_lb_gpl = None
        self.about_win_lbl_gpl = None

        # set up the actions and right click menu for the applet
        action_group = Gtk.ActionGroup("BoincMonitorActions")
        action_group.add_actions([("prefs_action", Gtk.STOCK_PREFERENCES,
                                   _("_Preferences"), None, _("Preferences"), self.show_prefs_win),
                                  ("detailed_status_action", Gtk.STOCK_HELP,
                                   _("Detailed client status..."), None,
                                   _("Detailed client status..."), self.show_status_win),
                                  ("about_action", Gtk.STOCK_ABOUT,
                                   _("About..."), None, _("About..."),
                                   self.show_about_win)])

        menu_xml = '<menuitem name="' + _("Preferences") + '" action="prefs_action"/>'
        menu_xml += '<menuitem name="' + _("Detailed client status...")
        menu_xml += '" action="detailed_status_action"/>' + '<menuitem name="'
        menu_xml += _("About...") + '" action="about_action"/><separator/>'

        self.panel_applet.setup_menu(menu_xml, action_group)

        self.panel_applet.connect("change-orient", self.change_panel_orient)

        self.setup_panel()
        self.panel_applet.set_background_widget(self.panel_applet) # hack for panel transparency
        self.do_first_update()
        self.panel_applet.show_all()

    def do_first_update(self):
        """
        perform the first update of panel info (either on loading, or on the Boinc
        client becoming available after being offline) and therefore read all
        possible info
        """

        if not self.boinc.client_is_online():
            self.go_offline()
        else:
            self.panel_applet.set_tooltip_text(_("Boinc Monitor"))
            self.boinc.get_projects()
            self.update_results()
            self.low_priority_updates()
            self.start_updates()    # start the regular updates

    def start_updates(self):
        """
        start two timers, one to update task status, and one to update project
        notices and the user's statuses which change less frequently
        """

        if not self.boinc.client_is_online():
            self.go_offline()
            return

        self.update_results_interval = self.settings.get_int("task-update-interval")      # minutes
        self.update_sundries_interval = self.settings.get_int("sundries-update-interval")  # hours

        self.update_results_timer = GObject.timeout_add(self.update_results_interval * 60000,
                                                        self.update_results)

        s_int = 60*60*1000*self.update_sundries_interval
        self.update_sundries_timer = GObject.timeout_add(s_int, self.low_priority_updates)

    def go_offline(self):
        """
        the Boinc client is offline, therefore
        stop regular updates (if they're enabled)
        update the panel so that the user is aware the client is offline
        setup a timer to check the client every 5 seconds to see if it comes the_applet.k online
        """
        if self.update_results_timer is not None:
            GObject.source_remove(self.update_results_timer)

        if self.update_sundries_timer is not None:
            GObject.source_remove(self.update_sundries_timer)

        # update the panel
        for label in self.task_labels:
            label.set_text("??.??%")

        if self.lbl_today_uc is not None:
            self.lbl_today_uc.set_text("?")

        if self.lbl_total_uc is not None:
            self.lbl_total_uc.set_text("?")

        self.panel_applet.set_tooltip_text(_("Boinc Monitor - Boinc is not running"))

        #update the status window if it's been created, i.e.
        # change the window's title and set the status of each task to 'Stopped'
        if self.status_win is not None:
            self.status_win.set_title(_("Boinc client - not running"))

            the_iter = self.status_win_list_store.get_iter_first()
            while the_iter is not None:
                self.status_win_list_store.set_value(the_iter, 1, _("Stopped"))
                the_iter = self.status_win_list_store.iter_next(the_iter)

        self.offline_timer_obj = GObject.timeout_add(5000, self.offline_timer)

    def offline_timer(self):
        """
        called by a timer when the Boinc client is offline

        check to see to see if the client is now online, if so stop the
        timer and begin regular updates
        """

        if self.boinc.client_is_online():

            # the client is online - start all regular updates
            self.offline_timer_obj = None
            self.do_first_update()
            if self.status_win is not None:
                self.status_win.set_title(_("Boinc client - running"))

            retval = False # stop this timer
        else:
            retval = True

        return retval

    def change_panel_orient(self, applet, orient):
        """
        callthe_applet.k function for when the panel changes orientation (top, left, bottom, right)

        setup the panel according the new orientation and populate it with info from the
        client
        """

        self.setup_panel()
        self.update_results()
        self.low_priority_updates()

    def setup_panel(self):
        """
        setup the applet, create widgets to display the required information and take
        account of the panel orientation whilst doing so

        if the panel has already been set up, remove any widgets already created
        """

        if self.panel_box is not None:
            for label in self.task_labels:
                self.panel_box.remove(label)

            self.task_labels = []

            for image in self.task_images:
                self.panel_box.remove(image)

            self.task_images = []

            for label in self.spacer_labels:
                self.panel_box.remove(label)

            self.spacer_labels = []

            for label in self.credit_labels:
                self.panel_box.remove(label)

            if self.lbl_today_uc:
                self.panel_box.remove(self.lbl_today_uc)

            if self.lbl_total_uc:
                self.panel_box.remove(self.lbl_total_uc)

            self.panel_applet.remove(self.panel_box)

        orientation = self.panel_applet.get_orient()

        # if the panel orientation is top or bottom, extra widgets may be required to
        # provide spacing after task status information
        if orientation == MatePanelApplet.AppletOrient.UP or \
           orientation == MatePanelApplet.AppletOrient.DOWN:
            self.panel_box = Gtk.HBox(homogeneous=False, spacing=0)
            add_spacers = True
        else:
            self.panel_box = Gtk.VBox(homogeneous=False, spacing=0)
            add_spacers = False

        num_tasks = self.settings.get_int("tasks-to-display")

        # add widgets to display task status
        for i in range(0, num_tasks):

            image = Gtk.Image()
            image.set_from_file("@LOCATION@/sahsl.png")
            self.task_images.append(image)

            self.panel_box.pack_start(image, False, False, 0)

            label = Gtk.Label("")
            label.set_use_markup = True
            label.set_markup("--.--%")
            self.panel_box.pack_start(label, False, False, 0)
            self.task_labels.append(label)

            if add_spacers and (i != num_tasks-1):
                spacer_label = Gtk.Label()
                self.panel_box.pack_start(spacer_label, False, False, 2)
                self.spacer_labels.append(spacer_label)

        # show today's user credit?
        if self.settings.get_boolean("show-today-uc"):
            if add_spacers and (num_tasks != 0):
                spacer_label = Gtk.Label()
                self.panel_box.pack_start(spacer_label, False, False, 2)
                self.spacer_labels.append(spacer_label)

            label = Gtk.Label(_("DC:"))
            self.panel_box.pack_start(label, False, False, 0)
            self.credit_labels.append(label)

            self.lbl_today_uc = Gtk.Label()
            self.lbl_today_uc.set_use_markup(True)
            self.lbl_today_uc.set_markup("0")
            self.panel_box.pack_start(self.lbl_today_uc, False, False, 0)

        # show total user credit?
        if self.settings.get_boolean("show-total-uc"):
            if add_spacers and ((num_tasks != 0) or self.settings.get_boolean("show-today-uc")):
                spacer_label = Gtk.Label()
                self.panel_box.pack_start(spacer_label, False, False, 2)
                self.spacer_labels.append(spacer_label)

            label = Gtk.Label(_("TC:"))
            self.panel_box.pack_start(label, False, False, 0)
            self.credit_labels.append(label)

            self.lbl_total_uc = Gtk.Label()
            self.lbl_total_uc.set_use_markup(True)
            self.lbl_total_uc.set_markup("0")
            self.panel_box.pack_start(self.lbl_total_uc, False, False, 0)

        self.panel_applet.add(self.panel_box)
        self.panel_applet.show_all()

    def get_notices(self):
        """
        read project notices from the client and display them in the status window
        """
        if self.boinc is not None:

            self.boinc.read_notices()

            if self.status_win is not None:
                if self.num_notices != self.boinc.num_notices():
                    # new notices have been received
                    text_buf = Gtk.TextBuffer()
                    tag_bold = text_buf.create_tag("bold", weight=Pango.Weight.BOLD)

                    for notice in self.boinc.notices:

                        iter_start = text_buf.get_start_iter()
                        text_buf.insert(iter_start, notice.description + "\n\n")

                        iter_start = text_buf.get_start_iter()
                        text_buf.insert(iter_start, _("Received - ") + \
                                        notice.time_received.strftime("%d %B %Y, %I:%M%p") + "\n")

                        iter_start = text_buf.get_start_iter()
                        text_buf.insert_with_tags(iter_start, notice.project + \
                                                  " - " + notice.title +"\n\n", tag_bold)

                    self.status_win_tv_notices.set_buffer(text_buf)
                    self.num_notices = self.boinc.num_notices()

    def get_user_credits(self):
        """
        get the user's credit info from the client and update the panel/status window accordingly
        """
        if self.boinc is not None:
            self.boinc.read_user_credits()

            if self.status_win is not None:
                self.status_win_lbl_stat_date.set_text(self.boinc.stat_date.strftime("%d %b %Y"))
                self.status_win_lbl_stat_total_uc.set_text(
                    "{:1.3f}".format(self.boinc.stat_total_uc))
                self.status_win_lbl_stat_total_hc.set_text(
                    "{:1.3f}".format(self.boinc.stat_total_hc))
                self.status_win_lbl_stat_avg_uc.set_text(
                    "{:1.3f}".format(self.boinc.stat_avg_uc))
                self.status_win_lbl_stat_avg_hc.set_text(
                    "{:1.3f}".format(self.boinc.stat_avg_hc))
                self.status_win_lbl_stat_today_uc.set_text(
                    "{:1.3f}".format(self.boinc.stat_today_uc))
                self.status_win_lbl_stat_today_hc.set_text(
                    "{:1.3f}".format(self.boinc.stat_today_hc))

            # update the panel if showing the day or total user credits
            if self.lbl_today_uc is not None:
                self.lbl_today_uc.set_text("%d" % self.boinc.stat_today_uc)

            if self.lbl_total_uc is not None:
                self.lbl_total_uc.set_text("%d" % self.boinc.stat_total_uc)

    def low_priority_updates(self):
        """
        get information which changes less frequently from the client

        i.e. user credits and project notices
        """

        if not self.boinc.client_is_online():
            self.go_offline()
            return

        self.get_user_credits()

        # notices are only ever displayed on the status window, so there's no need to fetch them
        # if it hasn't been created
        if self.status_win is not None:
            self.get_notices()

    def update_results(self):
        """
        read task statuses from the Boinc client and update the panel and status window accordingly
        """

        if self.boinc is not None:

            if not self.boinc.client_is_online():
                self.go_offline()
                return False

            self.boinc.read_results()
            i = 0
            task_results = self.boinc.get_num_task_results()

            #first, update the panel
            while (i < task_results) and (i < len(self.task_labels)):
                task_fd = "%2.2f" % self.boinc.get_task_fraction_done(i)+ "%"
                self.task_labels[i].set_markup(task_fd)
                i += 1

            # if the information has window been created, that needs to be updated also
            if self.status_win is not None:
                i = 0
                self.status_win_list_store.clear()
                task_results = self.boinc.get_num_task_results()
                while i < task_results:
                     # if a task is currently running, make the percentage complete appear in
                     # bold text
                    task_state = self.boinc.get_task_state(i)
                    task_fd = "%2.2f" % self.boinc.get_task_fraction_done(i)+ "%"
                    if task_state == _("Running"):
                        task_fd = "<b>" + task_fd + "</b>"
                    self.status_win_list_store.append(["%d" % i,
                                                       task_state,
                                                       task_fd,
                                                       self.boinc.get_task_project(i),
                                                       self.boinc.get_task_name(i)])
                    i += 1

        return True

###################### 'About' window code ################################

    def about_win_delete_event(self, widget, event, data=None):
        """
        callthe_applet.k for the about window delete event

        Note: the window is not deleted, it is hidden instead so that it can
        be shown again if required later
        """
        self.about_win.hide()
        return True

    def about_win_button_press(self, widget, event):
        """
        callthe_applet.k for the Ok button on the About dialog
        """
        self.about_win.hide()

    def show_about_win(self, data=None):
        """
        callthe_applet.k to show the about window

        create the window if it does not already exist, otherwise just show it
        """

        if self.about_win is not None:
            self.about_win.present()
        else:
            self.about_win = Gtk.Window(title="Boinc applet")
            self.about_win_button = Gtk.Button(label="Close", stock=Gtk.STOCK_CLOSE)
            self.about_win_button.connect("button-press-event", self.about_win_button_press)
            self.about_win.connect("delete-event", self.about_win_delete_event)
            self.about_win.set_border_width(5)
            self.about_win_vbox = Gtk.VBox()
            self.about_win_vbox.set_spacing(2)
            self.about_win_hbx = Gtk.HButtonBox()
            self.about_win_hbx.set_layout(Gtk.ButtonBoxStyle.END)
            self.about_win_hbx.pack_start(self.about_win_button, False, False, 4)

            self.about_win_image = Gtk.Image()
            self.about_win_image.set_from_stock(Gtk.STOCK_ABOUT, Gtk.IconSize.DIALOG)
            self.about_win_lbl_title = Gtk.Label()
            self.about_win_lbl_title.set_use_markup(True)
            self.about_win_lbl_title.set_markup('<b><span size="17408">Boinc Monitor Applet V'+ \
                                                "@VERSION@" + '</span></b>')

            self.about_win_lbl_blurb1 = \
                Gtk.Label(_("An applet to monitor the progress of BOINC tasks."))
            self.about_win_lbl_blurb2 = \
                Gtk.Label(_("This program comes with ABSOLUTELY NO WARRENTY."))

            self.about_win_hbx_gpl = Gtk.HBox()
            self.about_win_lbl_gpl1 = Gtk.Label(_("See the"))
            self.about_win_lb_gpl = \
                Gtk.LinkButton("http://www.gnu.org/licenses/gpl-3.0.html",
                               _("GNU General Public License, version 3 or later"))
            self.about_win_lbl_gpl = Gtk.Label(_("for details"))

            self.about_win_hbx_gpl.pack_start(self.about_win_lbl_gpl1, False, False, 2)
            self.about_win_hbx_gpl.pack_start(self.about_win_lb_gpl, False, False, 1)
            self.about_win_hbx_gpl.pack_start(self.about_win_lbl_gpl, False, False, 0)

            self.about_win_vbox.pack_start(self.about_win_image, False, False, 2)
            self.about_win_vbox.pack_start(self.about_win_lbl_title, False, False, 0)
            self.about_win_vbox.pack_start(self.about_win_lbl_blurb1, False, False, 8)
            self.about_win_vbox.pack_start(self.about_win_lbl_blurb2, False, False, 0)
            self.about_win_vbox.pack_start(self.about_win_hbx_gpl, False, False, 0)
            self.about_win_vbox.pack_end(self.about_win_hbx, False, False, 5)
            self.about_win.add(self.about_win_vbox)

            self.about_win.show_all()

###################### Preferences window code ################################

    def prefs_win_delete_event(self, widget, event, data=None):
        """
        callthe_applet.k for the preferences window delete event

        do not delete the window, hide it instead so that it can be shown again
        later if needed
        """
        self.prefs_win.hide()
        return True

    def prefs_win_cancel_button_press(self, widget, event):
        """
        callthe_applet.k for the preferences window Cancel button press

        hide the window
        """

        self.prefs_win.hide()

    def prefs_win_ok_button_press(self, widget, event):
        """
        callthe_applet.k for the Ok button the preferences window

        update the panel according to any changes in the preferences and set new
        timers if update intervals have changed
        """

        #identify what, if anything, the user has changed
        timers_changed = \
           (self.prefs_win_spinbtn_task_interval.get_value() != self.update_results_interval) or \
           (self.prefs_win_spinbtn_lp_interval.get_value() != self.update_sundries_interval)

        panel_items_changed = self.prefs_win_spinbtn_tasks.get_value() != \
                              self.settings.get_int("tasks-to-display")
        panel_items_changed = panel_items_changed or \
                              (self.settings.get_boolean("show-today-uc") != \
                              self.prefs_win_cbc_today_uc.get_active())
        panel_items_changed = panel_items_changed or \
                              (self.settings.get_boolean("show-total-uc") != \
                              self.prefs_win_cbc_total_uc.get_active())

        # write the new settings
        self.settings.set_int("tasks-to-display", self.prefs_win_spinbtn_tasks.get_value())
        self.settings.set_boolean("show-total-uc", self.prefs_win_cbc_total_uc.get_active())
        self.settings.set_boolean("show-today-uc", self.prefs_win_cbc_today_uc.get_active())
        self.settings.set_int("task-update-interval",
                              self.prefs_win_spinbtn_task_interval.get_value())
        self.settings.set_int("sundries-update-interval",
                              self.prefs_win_spinbtn_lp_interval.get_value())

        # if the update intervals have changed then we need to delete the old timers
        # and add new ones
        if timers_changed:
            GObject.source_remove(self.update_results_timer)
            GObject.source_remove(self.update_sundries_timer)
            self.start_updates()

        if panel_items_changed:
            # panel items have been changed, so the panel needs to be setup again
            self.setup_panel()
            update_info = True

        self.prefs_win.hide()

        if panel_items_changed or timers_changed:
            # new info on the panel needs to be updated immediatly
            # if the timer intervals have been changed, the panel and status window need to be
            # updated immediately also
            self.update_results()
            self.low_priority_updates()

    def show_prefs_win(self, data=None):
        """
        callthe_applet.k to show the preferences window

        create it if necessary, otherwise show it
        """
        if self.prefs_win is not None:
            self.prefs_win.present()
        else:
            self.prefs_win = Gtk.Window(title=_("Preferences"))
            self.prefs_win.connect("delete-event", self.prefs_win_delete_event)
            self.prefs_win.set_border_width(5)
            self.prefs_win_vbox = Gtk.VBox()
            self.prefs_win_vbox.set_spacing(2)
            self.prefs_win_cancel_btn = Gtk.Button(label="Cancel", stock=Gtk.STOCK_CANCEL)
            self.prefs_win_cancel_btn.connect("button-press-event",
                                              self.prefs_win_cancel_button_press)
            self.prefs_win_ok_btn = Gtk.Button(label="Ok", stock=Gtk.STOCK_OK)
            self.prefs_win_ok_btn.connect("button-press-event", self.prefs_win_ok_button_press)
            self.prefs_win_hbbx = Gtk.HButtonBox()
            self.prefs_win_hbbx.set_spacing(4)
            self.prefs_win_hbbx.set_layout(Gtk.ButtonBoxStyle.END)
            self.prefs_win_hbbx.pack_start(self.prefs_win_ok_btn, False, False, 4)
            self.prefs_win_hbbx.pack_start(self.prefs_win_cancel_btn, False, False, 4)

            self.prefs_win_frame_display = Gtk.Frame(label=_("Display"))
            lbl = self.prefs_win_frame_display.get_label_widget()
            lbl.set_use_markup(True)
            lbl.set_label("<b>" + _("Display") + "</b>")

            self.prefs_win_frame_display.set_shadow_type(Gtk.ShadowType.NONE)
            self.prefs_win_table_display = Gtk.Table(rows=3, columns=2, homogeneous=False)

            self.prefs_win_lbl_numtasks = Gtk.Label(_("Number of tasks to display:"))
            self.prefs_win_table_display.attach(self.prefs_win_lbl_numtasks, 0, 1, 0, 1,
                                                Gtk.AttachOptions.FILL, Gtk.AttachOptions.SHRINK,
                                                4, 2)
            self.prefs_win_lbl_numtasks.set_alignment(0.03, 0.5)

            self.prefs_win_spinbtn_tasks = Gtk.SpinButton()
            self.prefs_win_spinbtn_adj = Gtk.Adjustment(lower=0, upper=8, step_increment=1,
                                                        page_increment=1)
            self.prefs_win_spinbtn_tasks.set_adjustment(self.prefs_win_spinbtn_adj)
            self.prefs_win_spinbtn_tasks.set_numeric(True)
            self.prefs_win_spinbtn_tasks.set_wrap(True)
            self.prefs_win_spinbtn_tasks.set_max_length(1)
            self.prefs_win_spinbtn_tasks.set_update_policy(Gtk.SpinButtonUpdatePolicy.IF_VALID)

            self.prefs_win_table_display.attach(self.prefs_win_spinbtn_tasks, 1, 2, 0, 1,
                                                Gtk.AttachOptions.FILL, Gtk.AttachOptions.SHRINK,
                                                2, 4)

            self.prefs_win_cbc_today_uc = Gtk.CheckButton(_("Display today's credit"))
            self.prefs_win_table_display.attach(self.prefs_win_cbc_today_uc, 0, 2, 1, 2,
                                                Gtk.AttachOptions.FILL, Gtk.AttachOptions.SHRINK,
                                                2, 2)

            self.prefs_win_cbc_total_uc = Gtk.CheckButton(_("Display total credit"))
            self.prefs_win_table_display.attach(self.prefs_win_cbc_total_uc, 0, 2, 2, 3,
                                                Gtk.AttachOptions.FILL, Gtk.AttachOptions.SHRINK,
                                                2, 2)

            self.prefs_win_frame_display_align = Gtk.Alignment(xalign=0.5, yalign=0.5,
                                                               xscale=1.0, yscale=1.0)
            self.prefs_win_frame_display_align.set_padding(0, 0, 12, 0)
            self.prefs_win_frame_display_align.add(self.prefs_win_table_display)
            self.prefs_win_frame_display.add(self.prefs_win_frame_display_align)

            frame_title = _("Updates")
            self.prefs_win_frame_updates = Gtk.Frame(label=frame_title)
            lbl = self.prefs_win_frame_updates.get_label_widget()
            lbl.set_use_markup(True)
            lbl.set_label("<b>" + _("Updates")+ "</b>")

            self.prefs_win_frame_updates.set_shadow_type(Gtk.ShadowType.NONE)
            self.prefs_win_table_updates = Gtk.Table(rows=2, columns=2, homogeneous=False)

            self.prefs_win_lbl_task_interval = Gtk.Label(_("Task update interval (minutes):"))
            self.prefs_win_table_updates.attach(self.prefs_win_lbl_task_interval, 0, 1, 0, 1,
                                                Gtk.AttachOptions.FILL, Gtk.AttachOptions.SHRINK,
                                                2, 2)
            self.prefs_win_lbl_task_interval.set_alignment(0.03, 0.5)

            self.prefs_win_spinbtn_task_interval = Gtk.SpinButton()
            self.prefs_win_spinbtn_task_adj = Gtk.Adjustment(lower=1, upper=60,
                                                             step_increment=1,
                                                             page_increment=1)
            self.prefs_win_spinbtn_task_interval.set_adjustment(self.prefs_win_spinbtn_task_adj)
            self.prefs_win_spinbtn_task_interval.set_numeric(True)
            self.prefs_win_spinbtn_task_interval.set_wrap(True)
            self.prefs_win_spinbtn_task_interval.set_max_length(2)
            self.prefs_win_spinbtn_task_interval.set_update_policy\
                                                (Gtk.SpinButtonUpdatePolicy.IF_VALID)

            self.prefs_win_table_updates.attach(self.prefs_win_spinbtn_task_interval, 1, 2, 0, 1,
                                                Gtk.AttachOptions.FILL, Gtk.AttachOptions.SHRINK,
                                                2, 2)

            self.prefs_win_lbl_sundries_interval = \
                Gtk.Label(_("User credits/project notices update interval (hours):"))
            self.prefs_win_table_updates.attach(self.prefs_win_lbl_sundries_interval, 0, 1, 1, 2,
                                                Gtk.AttachOptions.FILL, Gtk.AttachOptions.SHRINK,
                                                2, 2)
            self.prefs_win_lbl_sundries_interval.set_alignment(0.03, 0.5)

            self.prefs_win_spinbtn_lp_interval = Gtk.SpinButton()
            self.prefs_win_spinbtn_si_adj = Gtk.Adjustment(lower=1, upper=8,
                                                           step_increment=1,
                                                           page_increment=1)
            self.prefs_win_spinbtn_lp_interval.set_adjustment(self.prefs_win_spinbtn_si_adj)
            self.prefs_win_spinbtn_lp_interval.set_numeric(True)
            self.prefs_win_spinbtn_lp_interval.set_wrap(True)
            self.prefs_win_spinbtn_lp_interval.set_max_length(1)
            self.prefs_win_spinbtn_lp_interval.set_update_policy \
                                                        (Gtk.SpinButtonUpdatePolicy.IF_VALID)

            self.prefs_win_table_updates.attach(self.prefs_win_spinbtn_lp_interval,
                                                1, 2, 1, 2, Gtk.AttachOptions.FILL,
                                                Gtk.AttachOptions.SHRINK, 2, 2)

            self.prefs_win_frame_updates_align = Gtk.Alignment(xalign=0.5, yalign=0.5,
                                                               xscale=1.0, yscale=1.0)
            self.prefs_win_frame_updates_align.set_padding(0, 0, 12, 0)
            self.prefs_win_frame_updates_align.add(self.prefs_win_table_updates)
            self.prefs_win_frame_updates.add(self.prefs_win_frame_updates_align)

            self.prefs_win_vbox.pack_start(self.prefs_win_frame_display, True, True, 4)
            self.prefs_win_vbox.pack_start(self.prefs_win_frame_updates, True, True, 4)
            self.prefs_win_vbox.pack_start(self.prefs_win_hbbx, False, False, 0)

            self.prefs_win.connect("delete-event", self.prefs_win_delete_event)

            self.prefs_win_spinbtn_tasks.set_value(2)

            self.prefs_win.add(self.prefs_win_vbox)

            # read the current preferences and update the window accordingly
            self.prefs_win_spinbtn_tasks.set_value(self.settings.get_int("tasks-to-display"))
            self.prefs_win_cbc_total_uc.set_active(self.settings.get_boolean("show-total-uc"))
            self.prefs_win_cbc_today_uc.set_active(self.settings.get_boolean("show-today-uc"))
            self.prefs_win_spinbtn_task_interval.set_value \
                    (self.settings.get_int("task-update-interval"))
            self.prefs_win_spinbtn_lp_interval.set_value \
                    (self.settings.get_int("sundries-update-interval"))

            self.prefs_win.show_all()

###################### Status window code ###############################

    def status_win_delete_event(self, widget, event, data=None):
        """
        callthe_applet.k for the status window delete event

        hide the window in case it is needed again, don't delete it
        """
        self.status_win.hide()
        return True

    def status_win_button_press(self, widget, event):
        """
        callthe_applet.k for the Close button press event on the status window

        hide the window
        """
        self.status_win.hide()

    def show_status_win(self, data=None):
        """
        callthe_applet.k for the show status window action

        create the window if it's not already been done, otherwise just show it
        """

        if self.status_win is not None:
            # the window has already been created, so just show it
            self.status_win.present()
        else:
            # first time through, create the window
            if self.offline_timer_obj:
                self.status_win = Gtk.Window(title=_("Boinc client - not running"))
            else:
                self.status_win = Gtk.Window(title=_("Boinc client - running"))

            self.status_win_button = Gtk.Button(label=_("Close"), stock=Gtk.STOCK_CLOSE)
            self.status_win_button.connect("button-press-event", self.status_win_button_press)
            self.status_win.connect("delete-event", self.status_win_delete_event)
            self.status_win.set_border_width(5)
            self.status_win_vbox = Gtk.VBox()
            self.status_win_vbox.set_spacing(2)
            self.status_win_hbx = Gtk.HButtonBox()
            self.status_win_hbx.set_layout(Gtk.ButtonBoxStyle.END)
            self.status_win_hbx.pack_start(self.status_win_button, False, False, 4)

            self.status_win_notebook = Gtk.Notebook()
            self.status_win_vbox.pack_start(self.status_win_notebook, True, True, 4)
            self.status_win_vbox.pack_start(self.status_win_hbx, True, True, 0)

            #initialise the treeview and liststore
            self.status_win_tree_view = Gtk.TreeView()

            # task num, state, %complete, project, task name
            self.status_win_list_store = Gtk.ListStore(str, str, str, str, str)

            self.status_win_slot_renderer = Gtk.CellRendererText()
            self.status_win_state_renderer = Gtk.CellRendererText()
            self.status_win_fd_renderer = Gtk.CellRendererText()
            self.status_win_project_renderer = Gtk.CellRendererText()
            self.status_win_name_renderer = Gtk.CellRendererText()

            # create columns for the treeview
            self.status_win_col_slot = Gtk.TreeViewColumn("",
                                                          self.status_win_slot_renderer,
                                                          text=0)
            self.status_win_col_slot.set_sizing(Gtk.TreeViewColumnSizing.FIXED)
            self.status_win_col_slot.set_fixed_width(30)

            self.status_win_col_state = Gtk.TreeViewColumn(_("State"),
                                                           self.status_win_state_renderer,
                                                           text=1)
            self.status_win_col_state.set_sizing(Gtk.TreeViewColumnSizing.FIXED)
            self.status_win_col_state.set_fixed_width(75)

            self.status_win_col_fraction_done = Gtk.TreeViewColumn(_("Complete"),
                                                                   self.status_win_fd_renderer,
                                                                   markup=2)
            self.status_win_col_fraction_done.set_sizing(Gtk.TreeViewColumnSizing.FIXED)
            self.status_win_col_fraction_done.set_fixed_width(75)

            self.status_win_col_project = Gtk.TreeViewColumn(_("Project"),
                                                             self.status_win_project_renderer,
                                                             text=3)
            self.status_win_col_project.set_sizing(Gtk.TreeViewColumnSizing.FIXED)
            self.status_win_col_project.set_fixed_width(200)

            self.status_win_col_task_name = Gtk.TreeViewColumn(_("Task name"),
                                                               self.status_win_name_renderer,
                                                               text=4)
            self.status_win_col_task_name.set_sizing(Gtk.TreeViewColumnSizing.FIXED)
            self.status_win_col_task_name.set_fixed_width(200)

            # add the columns
            self.status_win_tree_view.set_model(self.status_win_list_store)
            self.status_win_tree_view.append_column(self.status_win_col_slot)
            self.status_win_tree_view.append_column(self.status_win_col_state)
            self.status_win_tree_view.append_column(self.status_win_col_fraction_done)
            self.status_win_tree_view.append_column(self.status_win_col_project)
            self.status_win_tree_view.append_column(self.status_win_col_task_name)

            self.status_win_notebook.append_page(self.status_win_tree_view, Gtk.Label(_("Tasks")))

            self.status_win_table_stats = Gtk.Table(rows=11, columns=2, homogeneous=False)
            self.status_win_table_stats.attach(Gtk.Label(""), 0, 1, 0, 1,
                                               Gtk.AttachOptions.FILL,
                                               Gtk.AttachOptions.SHRINK, 0, 0)
            self.status_win_table_stats.attach(Gtk.Label(""), 1, 2, 0, 1,
                                               Gtk.AttachOptions.FILL,
                                               Gtk.AttachOptions.SHRINK, 0, 0)

            self.status_win_lbl_data_col = Gtk.Label("<u>" + _("Date:") + "</u>")
            self.status_win_lbl_data_col.set_use_markup(True)
            self.status_win_table_stats.attach(self.status_win_lbl_data_col, 0, 1, 1, 2,
                                               Gtk.AttachOptions.FILL,
                                               Gtk.AttachOptions.SHRINK, 0, 0)
            self.status_win_lbl_data_col.set_alignment(0.03, 0.5)
            self.status_win_lbl_stat_date = Gtk.Label("")
            self.status_win_lbl_stat_date.set_alignment(0.05, 0.5)
            self.status_win_lbl_stat_date.set_use_markup(True)
            self.status_win_table_stats.attach(self.status_win_lbl_stat_date, 1, 2, 1, 2,
                                               Gtk.AttachOptions.FILL,
                                               Gtk.AttachOptions.SHRINK, 0, 0)

            self.status_win_table_stats.attach(Gtk.Label(""), 0, 1, 2, 3,
                                               Gtk.AttachOptions.FILL,
                                               Gtk.AttachOptions.SHRINK, 0, 0)
            self.status_win_table_stats.attach(Gtk.Label(""), 1, 2, 2, 3,
                                               Gtk.AttachOptions.FILL,
                                               Gtk.AttachOptions.SHRINK, 0, 0)

            self.status_win_lbl_uct_col = Gtk.Label(_("User credit today: "))
            self.status_win_lbl_uct_col.set_alignment(0.03, 0.5)
            self.status_win_lbl_stat_today_uc = Gtk.Label("0.00")
            self.status_win_lbl_stat_today_uc.set_alignment(0.05, 0.5)
            self.status_win_table_stats.attach(self.status_win_lbl_uct_col,
                                               0, 1, 3, 4, Gtk.AttachOptions.FILL,
                                               Gtk.AttachOptions.SHRINK, 0, 0)
            self.status_win_table_stats.attach(self.status_win_lbl_stat_today_uc, 1, 2, 3, 4,
                                               Gtk.AttachOptions.FILL,
                                               Gtk.AttachOptions.SHRINK, 0, 0)

            self.status_win_lbl_hct_col = Gtk.Label(_("Host credit today: "))
            self.status_win_lbl_hct_col.set_alignment(0.03, 0.5)
            self.status_win_lbl_stat_today_hc = Gtk.Label("0.00")
            self.status_win_lbl_stat_today_hc.set_alignment(0.05, 0.5)
            self.status_win_table_stats.attach(self.status_win_lbl_hct_col,
                                               0, 1, 4, 5, Gtk.AttachOptions.FILL,
                                               Gtk.AttachOptions.SHRINK, 0, 0)
            self.status_win_table_stats.attach(self.status_win_lbl_stat_today_hc, 1, 2, 4, 5,
                                               Gtk.AttachOptions.FILL | Gtk.AttachOptions.EXPAND,
                                               Gtk.AttachOptions.SHRINK, 0, 0)

            self.status_win_table_stats.attach(Gtk.Label(""), 0, 1, 5, 6,
                                               Gtk.AttachOptions.FILL,
                                               Gtk.AttachOptions.SHRINK, 0, 0)
            self.status_win_table_stats.attach(Gtk.Label(""), 1, 2, 5, 6,
                                               Gtk.AttachOptions.FILL,
                                               Gtk.AttachOptions.SHRINK, 0, 0)

            self.status_win_lbl_title_avg_uc_col = Gtk.Label(_("User Daily Avg: "))
            self.status_win_lbl_title_avg_uc_col.set_alignment(0.03, 0.5)
            self.status_win_lbl_stat_avg_uc = Gtk.Label("0.00")
            self.status_win_lbl_stat_avg_uc.set_alignment(0.05, 0.5)
            self.status_win_table_stats.attach(self.status_win_lbl_title_avg_uc_col, 0, 1, 6, 7,
                                               Gtk.AttachOptions.FILL,
                                               Gtk.AttachOptions.SHRINK, 0, 0)
            self.status_win_table_stats.attach(self.status_win_lbl_stat_avg_uc, 1, 2, 6, 7,
                                               Gtk.AttachOptions.FILL | Gtk.AttachOptions.EXPAND,
                                               Gtk.AttachOptions.SHRINK, 0, 0)

            self.status_win_lbl_title_avg_hc_col = Gtk.Label(_("Host Daily Avg: "))
            self.status_win_lbl_title_avg_hc_col.set_alignment(0.03, 0.5)
            self.status_win_lbl_stat_avg_hc = Gtk.Label("0.00")
            self.status_win_lbl_stat_avg_hc.set_alignment(0.05, 0.5)
            self.status_win_table_stats.attach(self.status_win_lbl_title_avg_hc_col, 0, 1, 7, 8,
                                               Gtk.AttachOptions.FILL,
                                               Gtk.AttachOptions.SHRINK, 0, 0)
            self.status_win_table_stats.attach(self.status_win_lbl_stat_avg_hc, 1, 2, 7, 8,
                                               Gtk.AttachOptions.FILL | Gtk.AttachOptions.EXPAND,
                                               Gtk.AttachOptions.SHRINK, 0, 0)

            self.status_win_table_stats.attach(Gtk.Label(""), 0, 1, 8, 9,
                                               Gtk.AttachOptions.FILL,
                                               Gtk.AttachOptions.SHRINK, 0, 0)
            self.status_win_table_stats.attach(Gtk.Label(""), 1, 2, 8, 9,
                                               Gtk.AttachOptions.FILL,
                                               Gtk.AttachOptions.SHRINK, 0, 0)

            self.status_win_lbl_total_uc_col = Gtk.Label(_("User total credit: "))
            self.status_win_lbl_total_uc_col.set_alignment(0.03, 0.5)
            self.status_win_lbl_stat_total_uc = Gtk.Label("0.00")
            self.status_win_lbl_stat_total_uc.set_alignment(0.05, 0.5)
            self.status_win_table_stats.attach(self.status_win_lbl_total_uc_col,
                                               0, 1, 9, 10, Gtk.AttachOptions.FILL,
                                               Gtk.AttachOptions.SHRINK, 0, 0)
            self.status_win_table_stats.attach(self.status_win_lbl_stat_total_uc, 1, 2, 9, 10,
                                               Gtk.AttachOptions.FILL | Gtk.AttachOptions.EXPAND,
                                               Gtk.AttachOptions.SHRINK, 0, 0)

            self.status_win_lbl_total_hc_col = Gtk.Label(_("Host total credit: "))
            self.status_win_lbl_total_hc_col.set_alignment(0.03, 0.5)
            self.status_win_lbl_stat_total_hc = Gtk.Label("0.00")
            self.status_win_lbl_stat_total_hc.set_alignment(0.05, 0.5)
            self.status_win_table_stats.attach(self.status_win_lbl_total_hc_col,
                                               0, 1, 10, 11, Gtk.AttachOptions.FILL,
                                               Gtk.AttachOptions.SHRINK, 0, 0)
            self.status_win_table_stats.attach(self.status_win_lbl_stat_total_hc, 1, 2, 10, 11,
                                               Gtk.AttachOptions.FILL | Gtk.AttachOptions.EXPAND,
                                               Gtk.AttachOptions.SHRINK, 0, 0)

            self.status_win_notebook.append_page(self.status_win_table_stats,
                                                 Gtk.Label(_("Statistics")))

            self.status_win_scrolled_win = Gtk.ScrolledWindow()
            self.status_win_scrolled_win.set_policy(Gtk.PolicyType.NEVER, Gtk.PolicyType.AUTOMATIC)
            self.status_win_tv_notices = Gtk.TextView()
            self.status_win_tv_notices.set_wrap_mode(Gtk.WrapMode.WORD)
            self.status_win_tv_notices.set_editable(False)
            self.status_win_scrolled_win.add(self.status_win_tv_notices)
            self.status_win_notebook.append_page(self.status_win_scrolled_win,
                                                 Gtk.Label(_("Notices")))
            self.status_win.add(self.status_win_vbox)

            self.status_win.show_all()

            #update results so that the window gets populated

            self.update_results()
            self.low_priority_updates()

# create the applet
def applet_fill(applet):
    """
       create the applet and show it
    """
    the_applet = BoincApplet(applet)

def applet_factory(applet, iid, data):
    """
    this is called by mate-panel on applet creation
    """
    if iid != "BoincMonitorApplet":
        return False

    applet_fill(applet) # create the applet

    return True

MatePanelApplet.Applet.factory_main("BoincMonitorAppletFactory", True,
                                    MatePanelApplet.Applet.__gtype__,
                                    applet_factory, None)

def main():
    """
    main function - debugging code goes here
    """
    return

if __name__ == "__main__":
    main()
